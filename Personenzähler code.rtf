{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <lmic.h>\
#include <hal/hal.h>\
#include <ESP8266WiFi.h>\
#include "Ultrasonic.h"\
Ultrasonic Oultrasonic(5);\
Ultrasonic Fultrasonic(0);\
\
long SWert_rein;\
long SWert_raus;\
String sequence ="";\
int currentPeople = 0;\
long RangeInCentimeters;\
long FRange;\
\
\
// LoraWAN Copyright (c) 2015 Thomas Telkamp and Matthijs Kooijman\
// (c) 2018 Terry Moore, MCCI\
// https://github.com/mcci-catena/arduino-lmic\
// -------- LoRa PinMapping FeatherWing Octopus\
const lmic_pinmap lmic_pins = \{  \
  .nss = 2,                            // Connected to pin D\
  .rxtx = LMIC_UNUSED_PIN,             // For placeholder only, Do not connected on RFM92/RFM95\
  .rst = LMIC_UNUSED_PIN,              // Needed on RFM92/RFM95? (probably not) D0/GPIO16 \
  .dio = \{\
    15, 15, LMIC_UNUSED_PIN         \}\
\};\
\
static const u1_t PROGMEM DEVEUI[8]=\{\
  0xE7,0x46,0x04,0xD0,0x7E,0xD5,0xB3,0x70\};\
void os_getDevEui (u1_t* buf) \{ \
  memcpy_P(buf, DEVEUI, 8);\
\}\
\
static const u1_t PROGMEM APPEUI[8]=\{\
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\};\
void os_getArtEui (u1_t* buf) \{ \
  memcpy_P(buf, APPEUI, 8);\
\}\
\
static const u1_t PROGMEM APPKEY[16]=\{\
  0x94,0x26,0x8F,0xCA,0xC7,0x85,0x6D,0x99,0x53,0x47,0x21,0x81,0xB8,0x52,0x3E,0xFB\};\
void os_getDevKey (u1_t* buf) \{  \
  memcpy_P(buf, APPKEY, 16);\
\};\
\
volatile int LoRaWAN_Tx_Ready      = 0; // Merker f\'fcr ACK \
\
int LoRaWAN_Rx_Payload = 0 ;\
// -------- LoRa Event \
void onEvent (ev_t ev) \{ \
  Serial.print(os_getTime());\
  Serial.print(": ");\
  switch(ev) \{\
  case EV_SCAN_TIMEOUT:\
    Serial.println(F("EV_SCAN_TIMEOUT"));\
    break;\
  case EV_BEACON_FOUND:\
    Serial.println(F("EV_BEACON_FOUND"));\
    break;\
  case EV_BEACON_MISSED:\
    Serial.println(F("EV_BEACON_MISSED"));\
    break;\
  case EV_BEACON_TRACKED:\
    Serial.println(F("EV_BEACON_TRACKED"));\
    break;\
  case EV_JOINING:\
    Serial.println(F("EV_JOINING"));\
    break;\
  case EV_JOINED:\
    Serial.println(F("EV_JOINED"));\
    // Disable link check validation (automatically enabled\
    // during join, but not supported by TTN at this time).\
    LMIC_setLinkCheckMode(0);\
    break;\
  case EV_RFU1:\
    Serial.println(F("EV_RFU1"));\
    break;\
  case EV_JOIN_FAILED:\
    Serial.println(F("EV_JOIN_FAILED"));\
    break;\
  case EV_REJOIN_FAILED:\
    Serial.println(F("EV_REJOIN_FAILED"));\
    break;\
    break;\
  case EV_TXCOMPLETE:\
    Serial.println(F("EV_TXCOMPLETE (includes waiting for RX windows)"));\
    if (LMIC.txrxFlags & TXRX_ACK)\
      Serial.println(F("Received ack"));\
    if (LMIC.dataLen) \{\
      Serial.println(F("Received "));\
      Serial.println(LMIC.dataLen);\
      Serial.println(F(" bytes of payload"));\
      LoRaWAN_Rx_Payload = 0; \
      for (int i = 0;i<LMIC.dataLen;i++) \{ \
        Serial.println(LMIC.frame[i+ LMIC.dataBeg],HEX);\
        LoRaWAN_Rx_Payload = 256*LoRaWAN_Rx_Payload+LMIC.frame[i+ LMIC.dataBeg];\
      \}\
    \}\
    LoRaWAN_Tx_Ready = 1;\
    // Schedule next transmission\
    //os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);\
    break;\
  case EV_LOST_TSYNC:\
    Serial.println(F("EV_LOST_TSYNC"));\
    break;\
  case EV_RESET:\
    Serial.println(F("EV_RESET"));\
    break;\
  case EV_RXCOMPLETE:\
    // data received in ping slot\
    Serial.println(F("EV_RXCOMPLETE"));\
    break;\
  case EV_LINK_DEAD:\
    Serial.println(F("EV_LINK_DEAD"));\
    break;\
  case EV_LINK_ALIVE:\
    Serial.println(F("EV_LINK_ALIVE"));\
    break;\
  case EV_TXSTART:\
    Serial.println(F("EV_TXSTART"));\
    break;\
  case EV_JOIN_TXCOMPLETE:\
    Serial.println(F("EV_JOIN_TXCOMPLETE"));\
    break;\
  default:\
    Serial.println(F("Unknown event"));\
    break;\
  \}\
\}\
\
\
void setup()\{ // Einmalige Initialisierung\
  WiFi.forceSleepBegin(); // Wifi off\
  Serial.begin(115200);\
  // -- Initialisiere LoraWAN \
  os_init();             // LMIC LoraWAN\
  LMIC_reset();          // Reset the MAC state \
  LMIC.txpow = 27;       // Maximum TX power \
  LMIC.datarate=DR_SF12; // Long Range\
  LMIC.rps = updr2rps(LMIC.datarate);\
  \
  SWert_rein = Oultrasonic.MeasureInCentimeters();\
  SWert_raus = Fultrasonic.MeasureInCentimeters();\
\
\
  Serial.print("rein:");\
  Serial.print(SWert_rein);\
  Serial.print("raus:");\
  Serial.print(SWert_raus);\
\
 //Standartwert wird gesetzt,sobald sich der Octopus mit dem LoRaWan verbindet!\
\
\}\
\
void loop() \{ // Kontinuierliche Wiederholung \
    RangeInCentimeters = Oultrasonic.MeasureInCentimeters(); // two measurements should keep an interval\
  delay(1000);\
  FRange = Fultrasonic.MeasureInCentimeters(); \
  Serial.print("Octopus:");\
  Serial.print(RangeInCentimeters);//0~400cm\
  Serial.println(" cm");\
  Serial.print("Frei:");\
  Serial.print(FRange);\
  Serial.println(" cm");\
  Serial.print("Anzahl: ");\
  Serial.println(currentPeople);\
  //delay(750);\
\
  if(RangeInCentimeters < SWert_rein - 10 && sequence.charAt(0) != '1')\{\
    sequence += "1";\
  \}else if(FRange < SWert_raus - 10 && sequence.charAt(0) != '2')\{\
    sequence += "2";\
  \}\
  \
  if(sequence.equals("12"))\{\
    currentPeople++;\
    Serial.print("Jmd geht rein"); \
    sequence="";\
    //delay(550);\
  \} else if (sequence.equals("21") && currentPeople > 0)\{\
    currentPeople--; \
    Serial.print("Jmd geht raus"); \
    sequence="";\
    //delay(550);\
    \}\
\
  \{ //Block------------------------------ sende Daten an TTN  \
    int port = 10;\
    static uint8_t mydata[3];\
    int wert=round(currentPeople*1000);\
    mydata[0] = wert >> 16; \
    mydata[1] = wert >> 8; \
    mydata[2] = wert ;\
    // Check if there is not a current TX/RX job running\
    //if (LMIC.opmode & OP_TXRXPEND) \{\
    if (LMIC.opmode & (1 << 7)) \{ \
      Serial.println(F("OP_TXRXPEND, not sending"));\
    \} \
    else \{\
      // Prepare upstream data transmission at the next possible time.\
      LoRaWAN_Tx_Ready = 0;                                 // Merker f\'fcr ACK\
      LMIC_setTxData2(port, mydata, sizeof(mydata), 0);     // Sende         \
      Serial.println(F("Packet queued"));\
      while(LoRaWAN_Tx_Ready==0) \{\
        yield();\
        os_runloop_once();\
      \};  // Warte bis gesendet\
    \}\
  \} // Blockende\
  delay( 1000 );\
\
\
\}}